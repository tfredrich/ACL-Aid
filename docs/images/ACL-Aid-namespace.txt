@startuml
class AccessControl {
  -objects : Map<String, ObjectDefinition>
  -tuples : TupleStore
  +check(userset:String, relation:String, objectId:String) : boolean
}
class ObjectDefinition {
  -name : String
  -relations : Map<String, RelationDefinition>
  +rewrite(objectId : String) : UserSetExpression
}
class RelationDefinition {
  -name : String
  -parent : ObjectDefinition
  +rewrite(objectId:ObjectId) : UserSetExpression
}
interface RewriteRule {
  +rewrite(objectId : ObjectId) : UserSetExpression
  +isLeaf() : false
}
interface RewriteRuleLeaf {
  +isLeaf() : true
}
abstract BinaryRewriteRule {
  -lRule : RewriteRule
  -rRule : RewriteRule
}
class This
class ComputedUserSet {
  -relation : RelationDefinition
}
class SimpleTupleStore {
 -tuples : Collection<Tuple>
}
interface TupleStore {
  +add(tuple : Tuple): TupleStore
  +read(filter : TupleSet): TupleStore
  +remove(tuple : Tuple): TupleStore
}
class TupleToUserSet {
  -userset : ComputedUserSet
  -selector : Tuple
}
enum Tuple {
  $TUPLE_USERSET_OBJECT
  $TUPLE_USERSET_RELATION
  $TUPLE_RELATION
}

AccessControl --> TupleStore
AccessControl "1" *-->  "*" ObjectDefinition

RewriteRule <|.. BinaryRewriteRule
RewriteRule <|.. RewriteRuleLeaf
RewriteRule <|.. Union

BinaryRewriteRule <|-- Intersection
BinaryRewriteRule <|-- Exclusion
BinaryRewriteRule --> RewriteRule : lRule
BinaryRewriteRule --> RewriteRule : rRule

RewriteRuleLeaf <|.. This
RewriteRuleLeaf <|.. ComputedUserSet
RewriteRuleLeaf <|.. TupleToUserSet

ObjectDefinition "1" *-- "*" RelationDefinition : contains
RelationDefinition "0" --> "1" RewriteRule : has
Union "1" --> "*" RewriteRuleLeaf

TupleStore <|.. SimpleTupleStore

TupleToUserSet --> ComputedUserSet
TupleToUserSet --> Tuple
ComputedUserSet --> RelationDefinition
@enduml